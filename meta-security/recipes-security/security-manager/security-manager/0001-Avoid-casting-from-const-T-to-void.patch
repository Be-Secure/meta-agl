From 14c8842ed8a37fecbc70d46e27b49ae929b0c85f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jos=C3=A9=20Bollo?= <jose.bollo@iot.bzh>
Date: Fri, 1 Feb 2019 15:37:44 +0100
Subject: [PATCH] Avoid casting from "const T&" to "void*"
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Latest version of g++ refuse the cast

     reinterpret_cast<void (Service::*)(void*)>(serviceFunction)

I made no investigation to know if the problem
is coming from the const or not.

Signed-off-by: Jos√© Bollo <jose.bollo@iot.bzh>
---
 src/server/main/include/service-thread.h | 43 ++++++++++--------------
 1 file changed, 18 insertions(+), 25 deletions(-)

diff --git a/src/server/main/include/service-thread.h b/src/server/main/include/service-thread.h
index 964d168..92b0ec8 100644
--- a/src/server/main/include/service-thread.h
+++ b/src/server/main/include/service-thread.h
@@ -9,78 +94,72 @@ public:
             Join();
         while (!m_eventQueue.empty()){
             auto front = m_eventQueue.front();
-            delete front.eventPtr;
+            delete front;
             m_eventQueue.pop();
         }
     }
 
     template <class T>
     void Event(const T &event,
                Service *servicePtr,
                void (Service::*serviceFunction)(const T &))
     {
-        EventDescription description;
-        description.serviceFunctionPtr =
-            reinterpret_cast<void (Service::*)(void*)>(serviceFunction);
-        description.servicePtr = servicePtr;
-        description.eventFunctionPtr = &ServiceThread::EventCall<T>;
-        description.eventPtr = new T(event);
+        EventCallerBase *ec = new EventCaller<T>(event, servicePtr, serviceFunction);
         {
             std::lock_guard<std::mutex> lock(m_eventQueueMutex);
-            m_eventQueue.push(description);
+            m_eventQueue.push(ec);
         }
         m_waitCondition.notify_one();
     }
 
 protected:
 
-    struct EventDescription {
-        void (Service::*serviceFunctionPtr)(void *);
-        Service *servicePtr;
-        void (ServiceThread::*eventFunctionPtr)(const EventDescription &event);
-        GenericEvent* eventPtr;
-    };
-
-    template <class T>
-    void EventCall(const EventDescription &desc) {
-        auto fun = reinterpret_cast<void (Service::*)(const T&)>(desc.serviceFunctionPtr);
-        const T& eventLocale = *(static_cast<T*>(desc.eventPtr));
-        (desc.servicePtr->*fun)(eventLocale);
-    }
+    struct EventCallerBase {
+       virtual void fire() = 0;
+       virtual ~EventCallerBase() {}
+    };
 
+    template <class T>
+    struct EventCaller : public EventCallerBase {
+        T *event; Service *target; void (Service::*function)(const T&);
+        EventCaller(const T &e, Service *c, void (Service::*f)(const T&)) : event(new T(e)), target(c), function(f) {}
+	~EventCaller() { delete event; }
+	void fire() { (target->*function)(*event); }
+    };
+
     static void ThreadLoopStatic(ServiceThread *ptr) {
         ptr->ThreadLoop();
     }
 
     void ThreadLoop(){
         for (;;) {
-            EventDescription description = {NULL, NULL, NULL, NULL};
+            EventCallerBase *ec = NULL;
             {
                 std::unique_lock<std::mutex> ulock(m_eventQueueMutex);
                 if (m_quit)
                     return;
                 if (!m_eventQueue.empty()) {
-                    description = m_eventQueue.front();
+                    ec = m_eventQueue.front();
                     m_eventQueue.pop();
                 } else {
                     m_waitCondition.wait(ulock);
                 }
             }
 
-            if (description.eventPtr != NULL) {
+            if (ec != NULL) {
                 UNHANDLED_EXCEPTION_HANDLER_BEGIN
                 {
-                    (this->*description.eventFunctionPtr)(description);
-                    delete description.eventPtr;
+                    ec->fire();
                 }
                 UNHANDLED_EXCEPTION_HANDLER_END
+                delete ec;
             }
         }
     }
 
     std::thread m_thread;
     std::mutex m_eventQueueMutex;
-    std::queue<EventDescription> m_eventQueue;
+    std::queue<EventCallerBase*> m_eventQueue;
     std::condition_variable m_waitCondition;
 
     State m_state;
-- 
2.17.2

